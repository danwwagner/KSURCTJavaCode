/*
 * KSURCT Basestation GUI code for the OSU Mercury Robotics Competition 2016.
 * Networking uses Protobuf and WebSockets to send data to and from the Pi.
 * GUI keeps track of Motor status, sensor readings, servo status, and more!
 * Primary author: Dan Wagner
 * 
*/

package ksurctjavacode;


import com.google.protobuf.InvalidProtocolBufferException;
import java.awt.event.ActionEvent;
import javax.swing.JProgressBar;
import javax.swing.AbstractAction;
import javax.swing.KeyStroke;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;

import java.util.logging.Level;
import java.util.logging.Logger;

import org.java_websocket.client.WebSocketClient;
import org.java_websocket.drafts.Draft_17;
import org.java_websocket.handshake.ServerHandshake;
import org.java_websocket.exceptions.WebsocketNotConnectedException;



/**
 *
 * @author Dan Wagner
**/
public class BasestationGUI extends javax.swing.JDialog {

    
    // WebSocket Client for the Robot.
    private static WebSocketClient client;
    
    // IP Address to connect to the Pi.
    private String ipAddress;
    
    // Robot message portions
    private Main.Robot.Builder robot = Main.Robot.newBuilder();
    private Main.Robot.Motor.Builder leftMotor = robot.getMotorLeftBuilder();
    private Main.Robot.Motor.Builder rightMotor = robot.getMotorRightBuilder();
    private Main.Robot.LED.Builder LED = robot.getHeadlightsBuilder();
    private Main.Robot.Servo.Builder armature = robot.getArmBuilder();
    
    // Robot's status message
    private Main.BaseStation roboStatus;
    
    // Degrees of hand servo motor
    private int servoDegrees = 0;
    
    /**
     * Creates new form BasestationGUI
     * @param parent
     * @param modal
     */
    public BasestationGUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        registerKeyCommands();

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftMotorProgress = new javax.swing.JProgressBar(JProgressBar.VERTICAL);
        leftMotorLabel = new javax.swing.JLabel();
        rightMotorLabel = new javax.swing.JLabel();
        rightMotorProgress = new javax.swing.JProgressBar(JProgressBar.VERTICAL);
        frontLeftIRLabel = new javax.swing.JLabel();
        frontRightIRLabel = new javax.swing.JLabel();
        rearLeftIRLabel = new javax.swing.JLabel();
        rearRightIRLabel = new javax.swing.JLabel();
        ledStateLabel = new javax.swing.JLabel();
        frontLeftIRText = new javax.swing.JLabel();
        frontRightIRText = new javax.swing.JLabel();
        rearLeftIRText = new javax.swing.JLabel();
        rearRightIRText = new javax.swing.JLabel();
        ledStatusButton = new javax.swing.JToggleButton();
        armStateLabel = new javax.swing.JLabel();
        armStatusButton = new javax.swing.JToggleButton();
        uxIPBox = new javax.swing.JTextField();
        uxConnectButton = new javax.swing.JButton();
        uxDisconnectButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        uxEventLog = new javax.swing.JTextArea();
        uxCameraUD = new javax.swing.JSlider();
        uxCameraLR = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        uxHandDegrees = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        leftMotorLabel.setText("Left Motor");

        rightMotorLabel.setText("Right Motor");

        frontLeftIRLabel.setText("FL IR");

        frontRightIRLabel.setText("FR IR");

        rearLeftIRLabel.setText("RL IR");

        rearRightIRLabel.setText("RR IR");

        ledStateLabel.setText("LED");

        frontLeftIRText.setText(".");

        frontRightIRText.setText(".");

        rearLeftIRText.setText(".");

        rearRightIRText.setText(".");

        ledStatusButton.setText("OFF");

        armStateLabel.setText("Arm");

        armStatusButton.setText("LAUNCH!");

        uxConnectButton.setText("Connect");
        uxConnectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uxConnectButtonMouseClicked(evt);
            }
        });

        uxDisconnectButton.setText("Disconnect");
        uxDisconnectButton.setEnabled(false);
        uxDisconnectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uxDisconnectButtonMouseClicked(evt);
            }
        });

        uxEventLog.setColumns(20);
        uxEventLog.setRows(5);
        uxEventLog.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        uxEventLog.setEnabled(false);
        jScrollPane1.setViewportView(uxEventLog);

        uxCameraUD.setFocusable(false);
        uxCameraUD.setRequestFocusEnabled(false);
        uxCameraUD.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                uxCameraUDStateChanged(evt);
            }
        });

        uxCameraLR.setFocusable(false);
        uxCameraLR.setRequestFocusEnabled(false);
        uxCameraLR.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                uxCameraLRStateChanged(evt);
            }
        });

        jLabel1.setText("Left/Right");

        jLabel2.setText("Up/Down");

        jLabel3.setText("Hand");

        uxHandDegrees.setText("0 Degrees");
        uxHandDegrees.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        uxHandDegrees.setEnabled(false);
        uxHandDegrees.setFocusable(false);
        uxHandDegrees.setRequestFocusEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(uxHandDegrees, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(112, 112, 112)
                        .addComponent(armStatusButton)
                        .addGap(54, 54, 54))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(frontLeftIRText)
                                .addGap(99, 99, 99)
                                .addComponent(frontRightIRText, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(79, 79, 79)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(uxCameraUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(uxCameraLR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2)
                                        .addGap(87, 87, 87))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(frontLeftIRLabel)
                                                .addGap(45, 45, 45)
                                                .addComponent(frontRightIRLabel))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(11, 11, 11)
                                                .addComponent(ledStatusButton)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(leftMotorProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(rightMotorLabel)
                                            .addComponent(rightMotorProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(leftMotorLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uxIPBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uxConnectButton)
                            .addComponent(uxDisconnectButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(rearLeftIRText, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rearLeftIRLabel))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(54, 54, 54)
                                        .addComponent(rearRightIRLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(62, 62, 62)
                                        .addComponent(rearRightIRText)))))
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(ledStateLabel)
                        .addGap(203, 203, 203)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(armStateLabel)
                        .addGap(86, 86, 86))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(245, 245, 245))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(leftMotorLabel)
                            .addComponent(uxIPBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(uxConnectButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(uxDisconnectButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(leftMotorProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(rightMotorLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rightMotorProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(102, 102, 102)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(frontLeftIRLabel)
                            .addComponent(frontRightIRLabel)
                            .addComponent(rearLeftIRLabel)
                            .addComponent(rearRightIRLabel))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(frontLeftIRText)
                            .addComponent(frontRightIRText)
                            .addComponent(rearLeftIRText)
                            .addComponent(rearRightIRText))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(armStateLabel)
                            .addComponent(jLabel3)
                            .addComponent(ledStateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(armStatusButton)
                                .addComponent(uxHandDegrees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ledStatusButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(uxCameraUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uxCameraLR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *  Checks the text box for a valid IP and, if valid, attempts to connect to
     *  the Raspberry Pi.
     * @param evt Mouse Click event
     */
    private void uxConnectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uxConnectButtonMouseClicked
        
        // Checks for a non-empty textbox.
        if (!"".equals(uxIPBox.getText()))
        {
             ipAddress = uxIPBox.getText();
        }
        else return;
        
        try
        {
            setUpNetworking();
        }       
        catch (URISyntaxException ex)
        {
            ex.toString();
        }
        
    }//GEN-LAST:event_uxConnectButtonMouseClicked

    /**
     * Closes the connection to the robot.
     * @param evt 
     */
    private void uxDisconnectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uxDisconnectButtonMouseClicked
        client.close();
        uxDisconnectButton.setEnabled(false);
    }//GEN-LAST:event_uxDisconnectButtonMouseClicked

    /**
     * Handles UP/DOWN movement of the camera module.
     * @param evt 
     */
    private void uxCameraUDStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_uxCameraUDStateChanged
        uxEventLog.append(Integer.toString(uxCameraUD.getValue()) + "\n");
    }//GEN-LAST:event_uxCameraUDStateChanged

    /**
     * Handles LEFT/RIGHT movement of the camera module.
     * @param evt 
     */
    private void uxCameraLRStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_uxCameraLRStateChanged
        uxEventLog.append(Integer.toString(uxCameraLR.getValue()) + "\n");
    }//GEN-LAST:event_uxCameraLRStateChanged

    /**
     * @param args the command line arguments
     * @throws URISyntaxException exception thrown with incorrect URI
     */
    public void main(String args[]) throws URISyntaxException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BasestationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BasestationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BasestationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BasestationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BasestationGUI dialog = new BasestationGUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });   

    }
    
    /**
     * Builds & sends a protobuf message to send to the Raspberry Pi.
     * TODO: Modify for hand opening, hand angle adjustments, and webcam movement.
     * TODO: Adjust to only send updates on updated information?
     */
    private void sendUpdates()
    {
        
        // Set the correct values of each motor and signify update.
        leftMotor.setSpeed(leftMotorProgress.getValue());
        rightMotor.setSpeed(rightMotorProgress.getValue());
        leftMotor.setUpdate(true);
        rightMotor.setUpdate(true);
        
        // Set the correct values of the arm and signify update. TODO
        armature.setDegree(60);
        armature.setUpdate(true);
      
        // Set the correct values of the LED and signify update.
        LED.setOn("ON".equals(ledStatusButton.getText()));
        LED.setUpdate(true);
       
        // Build the message.
        byte[] message = robot.build().toByteArray();
        // Send the message - byte array format.   
        client.send(message);
    }
    
    /**
     * Decodes a message from the Pi into data to display onto the GUI. TODO
     * @param piMessage Message from the Raspberry Pi
     * @throws InvalidProcolBufferException
     * 
     */
    private void decodeMessage(ByteBuffer piMessage) throws InvalidProtocolBufferException
    {
        // Obtain the robot's status packet & parse it
        roboStatus = Main.BaseStation.parseFrom(piMessage.array());
        Main.BaseStation.Distance irSensors = roboStatus.getSensorData();
        
        // If there's an update available, update to the newest information.
        if (irSensors.getUpdate())
        {           
            frontLeftIRText.setText(Integer.toString((irSensors.getFrontLeft())));
            frontRightIRText.setText(Integer.toString((irSensors.getFrontRight())));
            rearLeftIRText.setText(Integer.toString((irSensors.getBackLeft())));
            rearRightIRText.setText(Integer.toString((irSensors.getBackRight())));
        }
       // uxEventLog.append("Decoded message\n");
        
    }
    /**
     * Sets up the network connection between the BaseStation and the Raspberry Pi.
     * @throws URISyntaxException exception thrown with incorrect URI
     *  TODO
     */
    private void setUpNetworking() throws URISyntaxException 
    {       
            // Initialize the WebSocket Client, port 8002
            client = new WebSocketClient( new URI("ws://" + ipAddress + ":8002"), new Draft_17()) {
            @Override
            public void onOpen(ServerHandshake handshakedata) {
                 uxIPBox.setEnabled(false);
                 uxConnectButton.setEnabled(false);
                 uxDisconnectButton.setEnabled(true);
                 uxEventLog.setText("");
                 uxEventLog.append("Connected to PEBBL.\n");
            
            }
            

            @Override
            public void onMessage(ByteBuffer message) {
             try { 
                decodeMessage(message);
                sendUpdates();
             }
             catch (InvalidProtocolBufferException ex)
             {
                 Logger.getLogger(BasestationGUI.class.getName()).log(Level.SEVERE, null, ex);
             }
            }

            @Override
            public void onClose(int code, String reason, boolean remote) {
                uxIPBox.setEnabled(true);
                uxConnectButton.setEnabled(true);
                uxDisconnectButton.setEnabled(false);
                uxEventLog.append("Disconnected from PEBBL.\n");

            }

            @Override
            @SuppressWarnings("SleepWhileInLoop")
            public void onError(Exception ex) {
                if (ex instanceof  WebsocketNotConnectedException)
                {
                     uxEventLog.append("Error: Retrying connection...\n");
                     for(int i = 1; i <= 10; i++)
                     {
                        try 
                        {
                            uxConnectButton.setText(i + "...");
                            Thread.sleep(1000);
                        } 
                        catch (InterruptedException ex1)
                        {
                            Logger.getLogger(BasestationGUI.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                     }
                     
                     uxConnectButton.setText("Retry Comms");
               }
                
                else 
                {
                    client.close();
                }
               
            }

                // This is here because Java is not a nice person.
                @Override
                public void onMessage(String message) {
                    
                }
        };
            
            // Establish connection to the Pi.
            client.connect();
    }
    
    
    /**
    * Registers the key commands for maneuvering the robot to the GUI.
    */
    private void registerKeyCommands()
    {
        // Initialize the Action and Input maps.
        _leftMotorAction = leftMotorProgress.getActionMap();
        _leftMotorInput =  leftMotorProgress.getInputMap();
        _rightMotorAction = rightMotorProgress.getActionMap();
        _rightMotorInput =  rightMotorProgress.getInputMap();
        
        Action moveForward = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (_lthrottle <= 100)
                {    
                    leftMotorProgress.setValue(_lthrottle += 5);
                }
                if (_rthrottle <= 100)
                {
                    rightMotorProgress.setValue(_rthrottle += 5);
                }
                sendUpdates();
            }    
        };
        
        Action moveBackward = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                if (_lthrottle >= 0)
                {
                    leftMotorProgress.setValue(_lthrottle -= 5);
                }              
                if (_rthrottle >= 0)
                {
                    rightMotorProgress.setValue(_rthrottle -= 5);
                }
                sendUpdates();
            }
        };
        
        Action turnLeft = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                 leftMotorProgress.setValue(50);
                 rightMotorProgress.setValue(25);
                 sendUpdates();
            }
        };
        
        Action turnRight = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                 leftMotorProgress.setValue(25);
                 rightMotorProgress.setValue(50);
                 sendUpdates();
            }
        };
        
        Action toggleLED = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                if ("OFF".equals(ledStatusButton.getText()))
                {
                    ledStatusButton.setText("ON");
                }
                else
                {
                    ledStatusButton.setText("OFF");
                }
                sendUpdates();
            }
        };
        
        Action launchArm = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                armStatusButton.setText("THREW");
                armStatusButton.setEnabled(false);
                sendUpdates();
                armStatusButton.setText("LAUNCH");
            }
        };
        
        Action increaseDegrees = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                uxHandDegrees.setText(Integer.toString(++servoDegrees) + " Degrees");
                sendUpdates();
            }
        };
        
        Action decreaseDegrees = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                uxHandDegrees.setText(Integer.toString(--servoDegrees) + " Degrees");
                sendUpdates();
            }
        };
        
        // TODO
        Action openHand = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                // What do I need to do when the hand is opened? Send to Pi?
            }
        };
        
        Action decreaseRSpeed = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                rightMotorProgress.setValue(_rthrottle -= 5);
            }
        };
        
        Action decreaseLSpeed = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                leftMotorProgress.setValue(_lthrottle -= 5);
            }
        };
        
        // Set up the bindings for the key commands of the left motor.
        _leftMotorInput.put(KeyStroke.getKeyStroke("W"), "moveForward");
        _leftMotorAction.put("moveForward", moveForward);
        _leftMotorInput.put(KeyStroke.getKeyStroke("S"), "moveBackward");
        _leftMotorAction.put("moveBackward", moveBackward);
        _leftMotorInput.put(KeyStroke.getKeyStroke("A"), "turnLeft");
        _leftMotorAction.put("turnLeft", turnLeft);
        _leftMotorInput.put(KeyStroke.getKeyStroke("D"), "turnRight");
        _leftMotorAction.put("turnRight", turnRight);        
        _leftMotorInput.put(KeyStroke.getKeyStroke("L"), "toggleLED");
        _leftMotorAction.put("toggleLED", toggleLED);
        _leftMotorInput.put(KeyStroke.getKeyStroke("Z"), "launchArm");
        _leftMotorAction.put("launchArm", launchArm);  
        _leftMotorInput.put(KeyStroke.getKeyStroke("X"), "increaseDegrees");
        _leftMotorAction.put("increaseDegrees", increaseDegrees);
        _leftMotorInput.put(KeyStroke.getKeyStroke("V"), "decreaseDegrees");
        _leftMotorAction.put("decreaseDegrees", decreaseDegrees);
        _leftMotorInput.put(KeyStroke.getKeyStroke("C"), "openHand");
        _leftMotorAction.put("openHand", openHand);
        _leftMotorInput.put(KeyStroke.getKeyStroke("Q"), "decreaseLSpeed");
        _leftMotorAction.put("decreaseLSpeed", decreaseLSpeed);
        _leftMotorInput.put(KeyStroke.getKeyStroke("E"), "decreaseRSpeed");
        _leftMotorAction.put("decreaseRSpeed", decreaseRSpeed);
        
        // Set up the bindings for the key commands of the right motor.
        _rightMotorInput.put(KeyStroke.getKeyStroke("W"), "moveForward");
        _rightMotorAction.put("moveForward", moveForward);
        _rightMotorInput.put(KeyStroke.getKeyStroke("S"), "moveBackward");
        _rightMotorAction.put("moveBackward", moveBackward);
        _rightMotorInput.put(KeyStroke.getKeyStroke("A"), "turnLeft");
        _rightMotorAction.put("turnLeft", turnLeft);     
        _rightMotorInput.put(KeyStroke.getKeyStroke("D"), "turnRight");
        _rightMotorAction.put("turnRight", turnRight);
        _rightMotorInput.put(KeyStroke.getKeyStroke("L"), "toggleLED");
        _rightMotorAction.put("toggleLED", toggleLED);
        _rightMotorInput.put(KeyStroke.getKeyStroke("Z"), "launchArm");
        _rightMotorAction.put("launchArm", launchArm);   
        _rightMotorInput.put(KeyStroke.getKeyStroke("X"), "increaseDegrees");
        _rightMotorAction.put("increaseDegrees", increaseDegrees);  
        _rightMotorInput.put(KeyStroke.getKeyStroke("V"), "decreaseDegrees");
        _rightMotorAction.put("decreaseDegrees", decreaseDegrees);
        _rightMotorInput.put(KeyStroke.getKeyStroke("C"), "openHand");
        _rightMotorAction.put("openHand", openHand);
         _rightMotorInput.put(KeyStroke.getKeyStroke("Q"), "decreaseLSpeed");
        _rightMotorAction.put("decreaseLSpeed", decreaseLSpeed);
         _rightMotorInput.put(KeyStroke.getKeyStroke("E"), "decreaseRSpeed");
        _rightMotorAction.put("decreaseRSpeed", decreaseRSpeed);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel armStateLabel;
    private javax.swing.JToggleButton armStatusButton;
    private javax.swing.JLabel frontLeftIRLabel;
    private javax.swing.JLabel frontLeftIRText;
    private javax.swing.JLabel frontRightIRLabel;
    private javax.swing.JLabel frontRightIRText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel ledStateLabel;
    private javax.swing.JToggleButton ledStatusButton;
    private javax.swing.JLabel leftMotorLabel;
    private javax.swing.JProgressBar leftMotorProgress;
    private javax.swing.JLabel rearLeftIRLabel;
    private javax.swing.JLabel rearLeftIRText;
    private javax.swing.JLabel rearRightIRLabel;
    private javax.swing.JLabel rearRightIRText;
    private javax.swing.JLabel rightMotorLabel;
    private javax.swing.JProgressBar rightMotorProgress;
    private javax.swing.JSlider uxCameraLR;
    private javax.swing.JSlider uxCameraUD;
    private javax.swing.JButton uxConnectButton;
    private javax.swing.JButton uxDisconnectButton;
    private javax.swing.JTextArea uxEventLog;
    private javax.swing.JTextField uxHandDegrees;
    private javax.swing.JTextField uxIPBox;
    // End of variables declaration//GEN-END:variables

   // Throttle variable for incrementing/decrementing motor controls.
    private int _lthrottle = 0;
    private int _rthrottle = 0;
    private ActionMap _leftMotorAction; 
    private InputMap _leftMotorInput;
    private ActionMap _rightMotorAction;
    private InputMap _rightMotorInput;
}
