/*
 * KSURCT Basestation GUI code for the OSU Mercury Robotics Competition 2016.
 * Networking uses Protobuf and WebSockets to send data to and from the Pi.
 * GUI keeps track of Motor status, sensor readings, servo status, and more!
 * Primary (and only) author: Dan Wagner
 * 
*/

package ksurctjavacode;


import com.google.protobuf.InvalidProtocolBufferException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.JProgressBar;
import javax.swing.AbstractAction;
import javax.swing.KeyStroke;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.DefaultCaret;

import org.java_websocket.client.WebSocketClient;
import org.java_websocket.drafts.Draft_17;
import org.java_websocket.handshake.ServerHandshake;


/**
 *
 * @author Dan Wagner
**/
public class BasestationGUI extends javax.swing.JDialog {

  
    /**
     * Creates new form BasestationGUI
     * @param parent
     * @param modal
     */
    public BasestationGUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        registerKeyCommands();

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftMotorProgress = new javax.swing.JProgressBar(JProgressBar.VERTICAL);
        leftMotorLabel = new javax.swing.JLabel();
        rightMotorLabel = new javax.swing.JLabel();
        rightMotorProgress = new javax.swing.JProgressBar(JProgressBar.VERTICAL);
        frontLeftIRLabel = new javax.swing.JLabel();
        frontRightIRLabel = new javax.swing.JLabel();
        ledStateLabel = new javax.swing.JLabel();
        frontLeftIRText = new javax.swing.JLabel();
        frontRightIRText = new javax.swing.JLabel();
        ledStatusButton = new javax.swing.JToggleButton();
        armStateLabel = new javax.swing.JLabel();
        uxIPBox = new javax.swing.JTextField();
        uxConnectButton = new javax.swing.JButton();
        uxDisconnectButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        uxEventLog = new javax.swing.JTextArea();
        uxCamera = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        uxWristDegrees = new javax.swing.JTextField();
        uxOpenClaw = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        leftMotorProgress.setMaximum(120);
        leftMotorProgress.setMinimum(-120);

        leftMotorLabel.setText("Left Motor");

        rightMotorLabel.setText("Right Motor");

        rightMotorProgress.setMaximum(120);
        rightMotorProgress.setMinimum(-120);

        frontLeftIRLabel.setText("FL IR");

        frontRightIRLabel.setText("FR IR");

        ledStateLabel.setText("LED");

        frontLeftIRText.setText(".");

        frontRightIRText.setText(".");

        ledStatusButton.setText("OFF");

        armStateLabel.setText("Wrist");

        uxConnectButton.setText("Connect");
        uxConnectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uxConnectButtonMouseClicked(evt);
            }
        });

        uxDisconnectButton.setText("Disconnect");
        uxDisconnectButton.setEnabled(false);
        uxDisconnectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uxDisconnectButtonMouseClicked(evt);
            }
        });

        uxEventLog.setColumns(20);
        uxEventLog.setRows(5);
        uxEventLog.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        uxEventLog.setEnabled(false);
        jScrollPane1.setViewportView(uxEventLog);

        uxCamera.setMaximum(180);
        uxCamera.setValue(180);
        uxCamera.setFocusable(false);
        uxCamera.setRequestFocusEnabled(false);

        jLabel1.setText("Front/Back");

        jLabel3.setText("Hand");

        uxWristDegrees.setText("0 Degrees");
        uxWristDegrees.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        uxWristDegrees.setEnabled(false);
        uxWristDegrees.setFocusable(false);
        uxWristDegrees.setName(""); // NOI18N
        uxWristDegrees.setRequestFocusEnabled(false);

        uxOpenClaw.setText("Open Claw");
        uxOpenClaw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uxOpenClawMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rightMotorProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(leftMotorLabel)
                                    .addComponent(leftMotorProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rightMotorLabel)
                                    .addComponent(frontLeftIRText)
                                    .addComponent(frontLeftIRLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(uxCamera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1)
                                            .addGap(66, 66, 66)))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(ledStatusButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(uxOpenClaw)
                                .addGap(90, 90, 90)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(uxWristDegrees, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(uxIPBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(uxConnectButton)
                                        .addComponent(uxDisconnectButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(frontRightIRText, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(frontRightIRLabel))
                                        .addGap(10, 10, 10)))
                                .addGap(39, 39, 39))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(ledStateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(173, 173, 173)
                        .addComponent(armStateLabel)
                        .addGap(70, 70, 70))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(leftMotorLabel)
                            .addComponent(uxIPBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(uxConnectButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(uxDisconnectButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(leftMotorProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(rightMotorLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rightMotorProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(frontLeftIRLabel)
                            .addComponent(frontRightIRLabel))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(frontLeftIRText))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(frontRightIRText)))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(armStateLabel)
                            .addComponent(jLabel3)
                            .addComponent(ledStateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(uxWristDegrees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(uxOpenClaw))
                            .addComponent(ledStatusButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(uxCamera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *  Checks the text box for a valid IP and, if valid, attempts to connect to
     *  the Raspberry Pi.
     * @param evt Mouse Click event
     */
    private void uxConnectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uxConnectButtonMouseClicked
        
        // Checks for a non-empty textbox.
        if (!"".equals(uxIPBox.getText()))
        {
             ipAddress = uxIPBox.getText();
        }
        else return;
        
        try
        {
            setUpNetworking();
        }       
        catch (URISyntaxException ex)
        {
            ex.toString();
        }
        
    }//GEN-LAST:event_uxConnectButtonMouseClicked

    /**
     * Closes the connection to the robot.
     * @param evt 
     */
    private void uxDisconnectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uxDisconnectButtonMouseClicked
       if (uxDisconnectButton.isEnabled())
       {
        if ("test".equals(ipAddress))
        {
           uxIPBox.setEditable(true);
           uxConnectButton.setEnabled(true);
           uxDisconnectButton.setEnabled(false);
           frontLeftIRText.setText(".");
           frontRightIRText.setText(".");
           uxEventLog.append("End of test chamber.\n");
           uxIPBox.requestFocusInWindow();
        }
        
        else client.close();
        uxDisconnectButton.setEnabled(false);
       }
    }//GEN-LAST:event_uxDisconnectButtonMouseClicked

    /**
     * Handles opening the claw via button click.
     * @param evt 
     */
    private void uxOpenClawMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uxOpenClawMouseClicked
        if (clawDegrees == 60) 
        {
            clawDegrees = 2;
            uxEventLog.append("Claw closed.");
        }
        else
        {
            clawDegrees = 60;
            uxEventLog.append("Claw opened.");
        }
        clawUpdate = true;
        leftMotorProgress.requestFocusInWindow();
        rightMotorProgress.requestFocusInWindow();
        sendUpdates();
        clawUpdate = false;
    }//GEN-LAST:event_uxOpenClawMouseClicked

    /**
     * @param args the command line arguments
     * @throws URISyntaxException exception thrown with incorrect URI
     */
    public void main(String args[]) throws URISyntaxException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BasestationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BasestationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BasestationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BasestationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BasestationGUI dialog = new BasestationGUI(new javax.swing.JFrame(), true);
                DefaultCaret caret = (DefaultCaret) uxEventLog.getCaret();
                caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
                uxEventLog.setFocusable(false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });   

    }
    
    /**
     * Builds & sends a protobuf message to send to the Raspberry Pi.
     * Every servo except the armature takes 0-180.
     * TODO: Modify for hand opening, hand angle adjustments, and webcam movement.
     */
    private void sendUpdates()
    {
       
        // Set the correct values of each motor or brakes and signify update.
        if (!setBrakes)
        {
            leftMotor.setSpeed(leftMotorProgress.getValue());
            rightMotor.setSpeed(rightMotorProgress.getValue());
        }
        
        leftMotor.setBreaks(setBrakes);
        rightMotor.setBreaks(setBrakes);
        
        leftMotor.setUpdate(leftMotorUpdate);
        rightMotor.setUpdate(rightMotorUpdate);
        
       // arm.setDegree(wristMethod); // Why is this 1? 1 -> launch, 0 no?
       // arm.setUpdate(armUpdate);
       
        // TODO -- Figure out what this exactly does
        if (armUpdate) arm.setDegree(armDegrees);//procedure = robot.getProceduresBuilder(2); // List length 2?
        
        arm.setUpdate(armUpdate);
        camera.setUpdate(cameraUpdate);
        camera.setDegree(cameraDegrees);
        
        claw.setDegree(clawDegrees);
        claw.setUpdate(clawUpdate);
        
        wrist.setDegree(wristMethod);
        wrist.setUpdate(wristUpdate);
        
        // Set the correct values of the LED and signify update.
        LED.setOn("ON".equals(ledStatusButton.getText()));
        LED.setUpdate(LEDUpdate);
       
        // Build the message.
        byte[] message = robot.build().toByteArray();
        
        // Send the message - byte array format.
        if (!"test".equals(ipAddress)) client.send(message);
    }
    
    /**
     * Decodes a message from the Pi into data to display onto the GUI. TODO
     * @param piMessage Message from the Raspberry Pi
     * @throws InvalidProcolBufferException
     * 
     */
    private void decodeMessage(ByteBuffer piMessage) throws InvalidProtocolBufferException
    {
        // Obtain the robot's status packet & parse it
        roboStatus = Main.BaseStation.parseFrom(piMessage.array());
        Main.BaseStation.Distance irSensors = roboStatus.getSensorData();
        
        // If there's an update available, update to the newest information.
        if (irSensors.getUpdate())
        {           
            frontLeftIRText.setText(Integer.toString((irSensors.getFrontLeft())));
            frontRightIRText.setText(Integer.toString((irSensors.getFrontRight())));
           
        }
        
    }
    /**
     * Sets up the network connection between the BaseStation and the Raspberry Pi.
     * @throws URISyntaxException exception thrown with incorrect URI
     *  
     */
    private void setUpNetworking() throws URISyntaxException 
    {       
            if (!"test".equals(ipAddress))
            {
            // Initialize the WebSocket Client, port 8002 - TODO: ipADDRESS IS TO BE FIXED, ALONG WITH PORT.
            client = new WebSocketClient( new URI("ws://" + ipAddress + ":9002"), new Draft_17()) {
            @Override
            public void onOpen(ServerHandshake handshakedata) {
                 uxIPBox.setEditable(false);
                 uxConnectButton.setEnabled(false);
                 uxDisconnectButton.setEnabled(true);
                 uxEventLog.setText("");
                 uxEventLog.append("Connected to PEBBL.\n");
            
            }
            

            @Override
            public void onMessage(ByteBuffer message) {
             try { 
                DefaultCaret caret = (DefaultCaret) uxEventLog.getCaret();
                caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
                decodeMessage(message);
                sendUpdates();
             }
             catch (InvalidProtocolBufferException ex)
             {
                 Logger.getLogger(BasestationGUI.class.getName()).log(Level.SEVERE, null, ex);
             }
            }

            @Override
            public void onClose(int code, String reason, boolean remote) {
                uxIPBox.setEditable(true);
                uxConnectButton.setEnabled(true);
                uxDisconnectButton.setEnabled(false);
                uxEventLog.append("Disconnected from PEBBL.\n");
            }

            @Override
            public void onError(Exception ex) {
                uxConnectButton.setText("Retry Comms");
                uxEventLog.append("Please check the IP and try again.\n");
            }

                // This is here because Java is not a nice person.
                @Override
                public void onMessage(String message) {
                    throw new UnsupportedOperationException();
                    
                }
        };
            
            // Establish connection to the Pi.
            client.connect();
      }
      else
      {
                 uxIPBox.setEditable(false);
                 uxConnectButton.setEnabled(false);
                 uxDisconnectButton.setEnabled(true);
                 uxEventLog.setText("");
                 frontLeftIRText.setText("N");
                 frontRightIRText.setText("O");
                 uxEventLog.append("Welcome, Chell.\nReady to test?\n");
      }
    }
    
    
    /**
    * Registers the key commands for maneuvering the robot to the GUI.
    */
    private void registerKeyCommands()
    {
        // Initialize the Action and Input maps.
        _leftMotorAction = leftMotorProgress.getActionMap();
        _leftMotorInput =  leftMotorProgress.getInputMap();
        _rightMotorAction = rightMotorProgress.getActionMap();
        _rightMotorInput =  rightMotorProgress.getInputMap();
        
        // Moves the robot forward.
        Action moveForward = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (_lthrottle <  _rthrottle) _lthrottle = _rthrottle;
                else if (_lthrottle > _rthrottle) _rthrottle = _lthrottle;
              
                    if (_lthrottle < 120)
                    {    
                        leftMotorProgress.setValue(_lthrottle += 10);
                        leftMotorUpdate = true;
                    }
                
                    else if (_lthrottle >= 120) 
                    {
                        leftMotorProgress.setValue(120);
                        _lthrottle = 120;
                    }
                
                     if (_rthrottle < 120)
                    {
                        rightMotorProgress.setValue(_rthrottle += 10);
                        rightMotorUpdate = true;
                    }

                    else if (_rthrottle >= 120)
                    {
                        rightMotorProgress.setValue(120);
                        _rthrottle = 120;
                    }
                 
                    uxEventLog.append("L: " + _lthrottle + "\t" + "R: " + _rthrottle + "\n");
                    sendUpdates();
                    leftMotorUpdate = false;
                    rightMotorUpdate = false;               
            }    
        };
        
        // Moves the robot in reverse.
        Action moveBackward = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                if (_lthrottle <  _rthrottle) _lthrottle = _rthrottle;
                else if (_lthrottle > _rthrottle) _rthrottle = _lthrottle;
                if (_lthrottle > -120)
                {
                    leftMotorProgress.setValue(_lthrottle -= 10);
                    leftMotorUpdate = true;
                }              
                if (_rthrottle > -120)
                {
                    rightMotorProgress.setValue(_rthrottle -= 10);
                    rightMotorUpdate = true;
                }
                
                uxEventLog.append("L: " + _lthrottle + "\t" + "R: " + _rthrottle + "\n");
                sendUpdates();
                leftMotorUpdate = false;
                rightMotorUpdate = false;
            }
        };
        
        // Turns the motor left.
        Action turnLeft = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                 leftMotorProgress.setValue(-60);
                 rightMotorProgress.setValue(60);
                 uxEventLog.append("Zero Point Left\n");
                 leftMotorUpdate = true;
                 rightMotorUpdate = true;
                 sendUpdates();
                 leftMotorUpdate = false;
                 rightMotorUpdate = false;
            }
        };
        
        // Turns the robot right.
        Action turnRight = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                 leftMotorProgress.setValue(60);
                 rightMotorProgress.setValue(-60);
                 uxEventLog.append("Zero Point Right\n");
                 leftMotorUpdate = true;
                 rightMotorUpdate = true;
                 sendUpdates();
                 leftMotorUpdate = false;
                 rightMotorUpdate = false;
            }
        };
        
        // Turns the LEDs off and on.
        Action toggleLED = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                if ("OFF".equals(ledStatusButton.getText()))
                {
                    ledStatusButton.setText("ON");
                }
                else
                {
                    ledStatusButton.setText("OFF");
                }
                LEDUpdate = true;
                sendUpdates();
                LEDUpdate = false;
            }
        };
        
        // Launches the arm.
        Action launchArm = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                procedureNumber = 2;
                armUpdate = true;
                if (armDegrees == 5304)
                {
                    armDegrees = 3120;
                    uxEventLog.append("Arm reset.\n");
                }
                else
                {
                    armDegrees = 5304;
                    uxEventLog.append("Arm launched.\n");
                }
                sendUpdates();
                armUpdate = false;
            }
        };
        
        // Decreases wrist degrees.
        Action decreaseWristAngle = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                wristMethod -= 18;
                if (wristMethod < 0) wristMethod = 0;
                uxWristDegrees.setText(Integer.toString(wristMethod) + " Deg.");
                wristUpdate = true;
                sendUpdates();
                wristUpdate = false;
            }
        };
      
        // Increases wrist degrees.
        Action increaseWristAngle = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                wristMethod += 18;
                if (wristMethod > 180) wristMethod = 180;
                uxWristDegrees.setText(Integer.toString(wristMethod) + " Deg.");
                wristUpdate = true;
                sendUpdates();
                wristUpdate = false;
            }
        };
        
        // Decreases the right motor's speed.
        Action decreaseRSpeed = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                rightMotorProgress.setValue(_rthrottle -= 5);
                rightMotorUpdate = true;
                 uxEventLog.append("Turn left [R: " + _rthrottle + "]\n");
                sendUpdates();
                rightMotorUpdate = false;
            }
        };
        
        // Increases the right motor's speed.
        Action increaseRSpeed = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                rightMotorProgress.setValue(_rthrottle += 5);
                rightMotorUpdate = true;
                uxEventLog.append("Turn right [R: " + _rthrottle + "]\n");
                sendUpdates();
                rightMotorUpdate = false;
            }
        };
        
        // Decreases the left motor's speed.
        Action decreaseLSpeed = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                leftMotorProgress.setValue(_lthrottle -= 5);
                leftMotorUpdate = true;
                uxEventLog.append("Turn left [L" + _lthrottle + "]\n");   
                sendUpdates();
                leftMotorUpdate = false;
            }
        };
        
        // Increases the left motor's speed.
        Action increaseLSpeed = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                leftMotorProgress.setValue(_lthrottle += 5);
                leftMotorUpdate = true;
                uxEventLog.append("Turn right [L:" + _lthrottle + "]\n");           
                sendUpdates();
                leftMotorUpdate = false;
            }
        };
        
        // Causes both motors to brake.
        Action hitBrakes = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                _lthrottle = 0;
                _rthrottle = 0;
                leftMotorProgress.setValue(_lthrottle);
                rightMotorProgress.setValue(_rthrottle);
                leftMotorUpdate = true;
                rightMotorUpdate = true;
                setBrakes = true;
                uxEventLog.append("HIT THE BRAKES!\n");
                sendUpdates();
                setBrakes = false;
                leftMotorUpdate = false;
                rightMotorUpdate = false;
            }
        };
        
         // Optimal speed to traverse the ramp safely.
        Action upRamp = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                leftMotorProgress.setValue(40);
                rightMotorProgress.setValue(40);
                leftMotorUpdate = true;
                rightMotorUpdate = true;
                uxEventLog.append("Ascending ramp: please wait..\n");
                sendUpdates();
                leftMotorUpdate = false;
                rightMotorUpdate = false;
            }
        };
        
        // Move camera to the right.
        Action moveCameraRight = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                
                if (cameraDegrees == 180) cameraDegrees = 175;
                cameraDegrees += 5;
                uxCamera.setValue(cameraDegrees);
                cameraUpdate = true;
                sendUpdates();
                cameraUpdate = false; 
            }
        };
        
        // Move camera to the left.
        Action moveCameraLeft = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                
                if (cameraDegrees == 0) cameraDegrees = 5;
                cameraDegrees -= 5;
                uxCamera.setValue(cameraDegrees);
                cameraUpdate = true;
                sendUpdates();
                cameraUpdate = false; 
            }
        };
        
        // Move camera to face backwards.
        Action faceCameraBackwards = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                cameraDegrees = 0;
                uxCamera.setValue(cameraDegrees);
                cameraUpdate = true;
                sendUpdates();
                cameraUpdate = false; 
            }
        };
        
        // Move camera to face forwards.
        Action faceCameraForwards = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                cameraDegrees = 180;
                uxCamera.setValue(cameraDegrees);
                cameraUpdate = true;
                sendUpdates();
                cameraUpdate = false; 
            }
        };
        
        // Set up the bindings for the key commands of the left motor.
        _leftMotorInput.put(KeyStroke.getKeyStroke("W"), "moveForward");
        _leftMotorAction.put("moveForward", moveForward);
        _leftMotorInput.put(KeyStroke.getKeyStroke("S"), "moveBackward");
        _leftMotorAction.put("moveBackward", moveBackward);
        _leftMotorInput.put(KeyStroke.getKeyStroke("A"), "turnLeft");
        _leftMotorAction.put("turnLeft", turnLeft);
        _leftMotorInput.put(KeyStroke.getKeyStroke("D"), "turnRight");
        _leftMotorAction.put("turnRight", turnRight);        
        _leftMotorInput.put(KeyStroke.getKeyStroke("L"), "toggleLED");
        _leftMotorAction.put("toggleLED", toggleLED);
        _leftMotorInput.put(KeyStroke.getKeyStroke("Z"), "launchArm");
        _leftMotorAction.put("launchArm", launchArm);
        _leftMotorInput.put(KeyStroke.getKeyStroke("V"), "increaseWristAngle");
        _leftMotorAction.put("increaseWristAngle", increaseWristAngle);
        _leftMotorInput.put(KeyStroke.getKeyStroke("C"), "decreaseWristAngle");
        _leftMotorAction.put("decreaseWristAngle", decreaseWristAngle);  
        _leftMotorInput.put(KeyStroke.getKeyStroke("Q"), "decreaseLSpeed");
        _leftMotorAction.put("decreaseLSpeed", decreaseLSpeed);
        _leftMotorInput.put(KeyStroke.getKeyStroke("P"), "decreaseRSpeed");
        _leftMotorAction.put("decreaseRSpeed", decreaseRSpeed);
        _leftMotorInput.put(KeyStroke.getKeyStroke("I"), "increaseRSpeed");
        _leftMotorAction.put("increaseRSpeed", increaseRSpeed);
        _leftMotorInput.put(KeyStroke.getKeyStroke("E"), "increaseLSpeed");
        _leftMotorAction.put("increaseLSpeed", increaseLSpeed);
        _leftMotorInput.put(KeyStroke.getKeyStroke(' '), hitBrakes);
        _leftMotorAction.put("hitBrakes", hitBrakes);
        _leftMotorInput.put(KeyStroke.getKeyStroke("R"), "upRamp");
        _leftMotorAction.put("upRamp", upRamp);
        _leftMotorInput.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), "moveCameraRight");
        _leftMotorAction.put("moveCameraRight", moveCameraRight);
        _leftMotorInput.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), "moveCameraLeft");
        _leftMotorAction.put("moveCameraLeft", moveCameraLeft);
        _leftMotorInput.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), "faceCameraBackwards");
        _leftMotorAction.put("faceCameraBackwards", faceCameraBackwards);
        _leftMotorInput.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), "faceCameraForwards");
        _leftMotorAction.put("faceCameraForwards", faceCameraForwards);
        
        
        // Set up the bindings for the key commands of the right motor.
        _rightMotorInput.put(KeyStroke.getKeyStroke("W"), "moveForward");
        _rightMotorAction.put("moveForward", moveForward);
        _rightMotorInput.put(KeyStroke.getKeyStroke("S"), "moveBackward");
        _rightMotorAction.put("moveBackward", moveBackward);
        _rightMotorInput.put(KeyStroke.getKeyStroke("A"), "turnLeft");
        _rightMotorAction.put("turnLeft", turnLeft);     
        _rightMotorInput.put(KeyStroke.getKeyStroke("D"), "turnRight");
        _rightMotorAction.put("turnRight", turnRight);
        _rightMotorInput.put(KeyStroke.getKeyStroke("L"), "toggleLED");
        _rightMotorAction.put("toggleLED", toggleLED);
        _rightMotorInput.put(KeyStroke.getKeyStroke("Z"), "launchArm");
        _rightMotorAction.put("launchArm", launchArm);    
        _rightMotorInput.put(KeyStroke.getKeyStroke("V"), "increaseWristAngle");
        _rightMotorAction.put("increaseWristAngle", increaseWristAngle);
        _rightMotorInput.put(KeyStroke.getKeyStroke("C"), "decreaseWristAngle");
        _rightMotorAction.put("decreaseWristAngle", decreaseWristAngle);
        _rightMotorInput.put(KeyStroke.getKeyStroke("Q"), "decreaseLSpeed");
        _rightMotorAction.put("decreaseLSpeed", decreaseLSpeed);
        _rightMotorInput.put(KeyStroke.getKeyStroke("P"), "decreaseRSpeed");
        _rightMotorAction.put("decreaseRSpeed", decreaseRSpeed);
        _rightMotorInput.put(KeyStroke.getKeyStroke("I"), "increaseRSpeed");
        _rightMotorAction.put("increaseRSpeed", increaseRSpeed);
        _rightMotorInput.put(KeyStroke.getKeyStroke("E"), "increaseLSpeed");
        _rightMotorAction.put("increaseLSpeed", increaseLSpeed);
        _rightMotorInput.put(KeyStroke.getKeyStroke(' '), "hitBrakes");
        _rightMotorAction.put("hitBrakes", hitBrakes);
        _rightMotorInput.put(KeyStroke.getKeyStroke("R"), "upRamp");
        _rightMotorAction.put("upRamp", upRamp);
        _rightMotorInput.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), "moveCameraRight");
        _rightMotorAction.put("moveCameraRight", moveCameraRight);
        _rightMotorInput.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), "moveCameraLeft");
        _rightMotorAction.put("moveCameraLeft", moveCameraLeft);           
        _rightMotorInput.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), "faceCameraBackwards");
        _rightMotorAction.put("faceCameraBackwards", faceCameraBackwards);
        _rightMotorInput.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), "faceCameraForwards");
        _rightMotorAction.put("faceCameraForwards", faceCameraForwards);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel armStateLabel;
    private javax.swing.JLabel frontLeftIRLabel;
    private javax.swing.JLabel frontLeftIRText;
    private javax.swing.JLabel frontRightIRLabel;
    private javax.swing.JLabel frontRightIRText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel ledStateLabel;
    private javax.swing.JToggleButton ledStatusButton;
    private javax.swing.JLabel leftMotorLabel;
    private javax.swing.JProgressBar leftMotorProgress;
    private javax.swing.JLabel rightMotorLabel;
    private javax.swing.JProgressBar rightMotorProgress;
    private javax.swing.JSlider uxCamera;
    private javax.swing.JButton uxConnectButton;
    private javax.swing.JButton uxDisconnectButton;
    private javax.swing.JTextArea uxEventLog;
    private javax.swing.JTextField uxIPBox;
    private javax.swing.JButton uxOpenClaw;
    private javax.swing.JTextField uxWristDegrees;
    // End of variables declaration//GEN-END:variables

   // Throttle variable for incrementing/decrementing motor controls.
    private int _lthrottle = 0;
    private int _rthrottle = 0;
    private ActionMap _leftMotorAction; 
    private InputMap _leftMotorInput;
    private ActionMap _rightMotorAction;
    private InputMap _rightMotorInput;
      
    // WebSocket Client for the Robot.
    private static WebSocketClient client;
    
    // IP Address to connect to the Pi.
    private String ipAddress;
    
    // Robot message portions
    private Main.Robot.Builder robot = Main.Robot.newBuilder();
    private Main.Robot.Motor.Builder leftMotor = robot.getMotorLeftRpmBuilder();
    private Main.Robot.Motor.Builder rightMotor = robot.getMotorRightRpmBuilder();
    private Main.Robot.LED.Builder LED = robot.getHeadlightsBuilder();
    private Main.Robot.Servo.Builder claw = robot.getClawBuilder();
    private Main.Robot.Servo.Builder camera = robot.getCameraBuilder();
    private Main.Robot.Servo.Builder arm = robot.getArmBuilder();  // Servo control for testing non-automated launch
    private Main.Robot.Servo.Builder wrist = robot.getWristBuilder();
    
    
    // Procedure list: 2 for Throw, 3 for ForceUserControl.
    private Main.Robot.Procedure.Builder procedure;
    
    // Booleans to determine update status of certain portions of the protobuf.
    private boolean leftMotorUpdate = false;
    private boolean rightMotorUpdate = false;
    private boolean LEDUpdate = false;
    private boolean armUpdate = false;
    private boolean clawUpdate = false;
    private boolean cameraUpdate = false;
    private boolean wristUpdate = false;
    private boolean setBrakes = false;
    
    // Integer determining what strength of turn to turn the camera.
    private int wristMethod = 0;
    
    // Robot's status message
    private Main.BaseStation roboStatus;
    
    // Testing arm control without non-automated launch.
    private int armDegrees = 0;
    
    // Degrees of camera servo
    private int cameraDegrees = 0;
    
    // Degrees of claw servo
    private int clawDegrees = 0;
    
    // Procedure number -- TODO: Needed?
    private int procedureNumber = 0;
    
}
