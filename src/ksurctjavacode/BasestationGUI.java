/*
 * KSURCT Basestation GUI code for the OSU Mercury Robotics Competition 2016.
 * Networking uses Protobuf and WebSockets to send data to and from the Pi.
 * GUI keeps track of Motor status, sensor readings, servo status, and more!
 * Primary author: Dan Wagner
 * 
*/

package ksurctjavacode;


import java.awt.event.ActionEvent;
import javax.swing.JProgressBar;
import javax.swing.AbstractAction;
import javax.swing.KeyStroke;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;
import javax.swing.JOptionPane;


import org.java_websocket.client.WebSocketClient;
import org.java_websocket.drafts.Draft_17;
import org.java_websocket.handshake.ServerHandshake;



/**
 *
 * @author Dan Wagner
**/
public class BasestationGUI extends javax.swing.JDialog {

    
    // WebSocket Client for the Robot.
    private static WebSocketClient client;
    
    // IP Address to connect to the Pi.
    private String ipAddress;
    
    /**
     * Creates new form BasestationGUI
     * @param parent
     * @param modal
     */
    public BasestationGUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        registerKeyCommands();

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftMotorProgress = new javax.swing.JProgressBar(JProgressBar.VERTICAL);
        leftMotorLabel = new javax.swing.JLabel();
        rightMotorLabel = new javax.swing.JLabel();
        rightMotorProgress = new javax.swing.JProgressBar(JProgressBar.VERTICAL);
        frontLeftIRLabel = new javax.swing.JLabel();
        frontRightIRLabel = new javax.swing.JLabel();
        rearLeftIRLabel = new javax.swing.JLabel();
        rearRightIRLabel = new javax.swing.JLabel();
        ledStateLabel = new javax.swing.JLabel();
        frontLeftIRText = new javax.swing.JLabel();
        frontRightIRText = new javax.swing.JLabel();
        rearLeftIRText = new javax.swing.JLabel();
        rearRightIRText = new javax.swing.JLabel();
        ledStatusButton = new javax.swing.JToggleButton();
        armStateLabel = new javax.swing.JLabel();
        armStatusButton = new javax.swing.JToggleButton();
        uxIPBox = new javax.swing.JTextField();
        uxConnectButton = new javax.swing.JButton();
        uxDisconnectButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        uxEventLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        leftMotorLabel.setText("Left Motor");

        rightMotorLabel.setText("Right Motor");

        frontLeftIRLabel.setText("FL IR");

        frontRightIRLabel.setText("FR IR");

        rearLeftIRLabel.setText("RL IR");

        rearRightIRLabel.setText("RR IR");

        ledStateLabel.setText("LED");

        frontLeftIRText.setText("...........");

        frontRightIRText.setText("...........");

        rearLeftIRText.setText("...........");

        rearRightIRText.setText("...........");

        ledStatusButton.setText("OFF");

        armStateLabel.setText("Arm");

        armStatusButton.setText("LAUNCH!");

        uxConnectButton.setText("Connect");
        uxConnectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uxConnectButtonMouseClicked(evt);
            }
        });

        uxDisconnectButton.setText("Disconnect");
        uxDisconnectButton.setEnabled(false);
        uxDisconnectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uxDisconnectButtonMouseClicked(evt);
            }
        });

        uxEventLog.setColumns(20);
        uxEventLog.setRows(5);
        uxEventLog.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        uxEventLog.setEnabled(false);
        jScrollPane1.setViewportView(uxEventLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(frontLeftIRLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(frontRightIRLabel))
                                    .addComponent(leftMotorProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rightMotorLabel)
                                    .addComponent(rightMotorProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(leftMotorLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uxIPBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uxConnectButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rearLeftIRLabel)
                                .addGap(54, 54, 54)
                                .addComponent(rearRightIRLabel))
                            .addComponent(uxDisconnectButton))
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(frontLeftIRText)
                        .addGap(47, 47, 47)
                        .addComponent(frontRightIRText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rearLeftIRText)
                        .addGap(36, 36, 36)
                        .addComponent(rearRightIRText)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ledStateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ledStatusButton)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(165, 165, 165)
                                .addComponent(armStateLabel)
                                .addGap(91, 91, 91))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(armStatusButton)
                                .addGap(54, 54, 54))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(leftMotorLabel)
                            .addComponent(uxIPBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(uxConnectButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(uxDisconnectButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(leftMotorProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(rightMotorLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rightMotorProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(frontLeftIRLabel)
                    .addComponent(frontRightIRLabel)
                    .addComponent(rearLeftIRLabel)
                    .addComponent(rearRightIRLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(frontLeftIRText)
                    .addComponent(frontRightIRText)
                    .addComponent(rearLeftIRText)
                    .addComponent(rearRightIRText))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ledStateLabel)
                    .addComponent(ledStatusButton)
                    .addComponent(armStateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(armStatusButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *  Checks the text box for a valid IP and, if valid, attempts to connect to
     *  the Raspberry Pi.
     * @param evt Mouse Click event
     */
    private void uxConnectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uxConnectButtonMouseClicked
        
        // Checks for a non-empty textbox.
        if (!"".equals(uxIPBox.getText()))
        {
             ipAddress = uxIPBox.getText();
        }
        else return;
        
        try
        {
            setUpNetworking();
        }       
        catch (URISyntaxException ex)
        {
            ex.toString();
        }
        
    }//GEN-LAST:event_uxConnectButtonMouseClicked

    /**
     * Closes the connection to the robot.
     * @param evt 
     */
    private void uxDisconnectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uxDisconnectButtonMouseClicked
        client.close();
    }//GEN-LAST:event_uxDisconnectButtonMouseClicked

    /**
     * @param args the command line arguments
     * @throws URISyntaxException exception thrown with incorrect URI
     */
    public void main(String args[]) throws URISyntaxException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BasestationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BasestationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BasestationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BasestationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BasestationGUI dialog = new BasestationGUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });   

    }
    
    /**
     * Builds & sends a protobuf message to send to the Raspberry Pi.
     */
    private void sendUpdates()
    {
        // Build each component of the message.
        Main.Robot.Builder robot = Main.Robot.newBuilder();
        Main.Robot.Motor.Builder leftMotor = robot.getMotor1Builder();
        Main.Robot.Motor.Builder rightMotor = robot.getMotor2Builder();
        Main.Robot.LED.Builder LED = robot.getHeadlightsBuilder();
        Main.Robot.Servo.Builder armature = robot.getArmBuilder();
        
        // Set the correct values of each motor and signify update.
        leftMotor.setSpeed(leftMotorProgress.getValue());
        rightMotor.setSpeed(rightMotorProgress.getValue());
        leftMotor.setUpdate(true);
        rightMotor.setUpdate(true);
        
        // Set the correct values of the arm and signify update. TODO
        armature.setDegree(60);
        armature.setUpdate(true);
      
        // Set the correct values of the LED and signify update.
        LED.setOn("ON".equals(ledStatusButton.getText()));
        LED.setUpdate(true);
       
        // Build the message.
        byte[] message = robot.build().toByteArray();
        // Send the message - byte array format.   
        client.send(message);
    }
    
    /**
     * Decodes a message from the Pi into data to display onto the GUI. TODO
     * @param piMessage Message from the Raspberry Pi
     * 
     */
    private void decodeMessage(byte[] piMessage)
    {
        
    }
    /**
     * Sets up the network connection between the BaseStation and the Raspberry Pi.
     * @throws URISyntaxException exception thrown with incorrect URI
     *  TODO
     */
    private void setUpNetworking() throws URISyntaxException 
    {
            // Frame for displaying confirmation/debugging modal dialogs.
            final JFrame frame = new JFrame();
            
            // Initialize the WebSocket Client, port 8002
            client = new WebSocketClient( new URI("ws://" + ipAddress + ":8002"), new Draft_17()) {
            @Override
            public void onOpen(ServerHandshake handshakedata) {
                 uxIPBox.setEnabled(false);
                 uxConnectButton.setEnabled(false);
                 uxDisconnectButton.setEnabled(true);
                 uxEventLog.setText("");
                 uxEventLog.append("Connected to PEBBL.\n");
            
            }
            

            @Override
            public void onMessage(String message) {
                 uxEventLog.append(message);
             //   decodeMessage(message.getBytes());
             //   buildMessageAndSend();
            }

            @Override
            public void onClose(int code, String reason, boolean remote) {
                uxIPBox.setEnabled(true);
                uxConnectButton.setEnabled(true);
                uxDisconnectButton.setEnabled(false);
                uxEventLog.append("Disconnected from PEBBL.\n");

            }

            @Override
            @SuppressWarnings("SleepWhileInLoop")
            public void onError(Exception ex) {
               uxEventLog.append("Error: Retrying connection...\n");
               for(int i = 1; i <= 10; i++)
               {
                   try {
                       uxConnectButton.setText(i + "...");
                       Thread.sleep(1000);
                   } catch (InterruptedException ex1) {
                       Logger.getLogger(BasestationGUI.class.getName()).log(Level.SEVERE, null, ex1);
                   }
               }
               
               // Retry connectivity.
               try
               {
                   
                   setUpNetworking();
               } catch (URISyntaxException ex1) {
                    Logger.getLogger(BasestationGUI.class.getName()).log(Level.SEVERE, null, ex1);
                }
               
               
            }
        };
            
            // Establish connection to the Pi.
            client.connect();
    }
    
    
    /**
    * Registers the key commands for maneuvering the robot to the GUI.
    */
    private void registerKeyCommands()
    {
        // Initialize the Action and Input maps.
        _leftMotorAction = leftMotorProgress.getActionMap();
        _leftMotorInput =  leftMotorProgress.getInputMap();
        _rightMotorAction = rightMotorProgress.getActionMap();
        _rightMotorInput =  rightMotorProgress.getInputMap();
        
        Action moveForward = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (_throttle <= 100)
                {    
                    leftMotorProgress.setValue(_throttle += 5);
                    rightMotorProgress.setValue(_throttle += 5);
                    sendUpdates();
                }
                
            }
                 
        };
        
        Action moveBackward = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                if (_throttle >= 0)
                {
                    leftMotorProgress.setValue(_throttle -= 5);
                    rightMotorProgress.setValue(_throttle -= 5);
                    sendUpdates();
                }
            }
        };
        
        Action turnLeft = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                 leftMotorProgress.setValue(50);
                 rightMotorProgress.setValue(25);
                 sendUpdates();
            }
        };
        
        Action turnRight = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                 leftMotorProgress.setValue(25);
                 rightMotorProgress.setValue(50);
                 sendUpdates();
            }
        };
        
        Action toggleLED = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                if ("OFF".equals(ledStatusButton.getText()))
                {
                    ledStatusButton.setText("ON");
                }
                else
                {
                    ledStatusButton.setText("OFF");
                }
                sendUpdates();
            }
        };
        
        Action launchArm = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                armStatusButton.setText("THREW");
                armStatusButton.setEnabled(false);
                sendUpdates();
            }
        };
        
        Action returnArm = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                armStatusButton.setText("LAUNCH");
                armStatusButton.setEnabled(true);
            }
        };
        
        // Set up the bindings for the key commands of the left motor.
        _leftMotorInput.put(KeyStroke.getKeyStroke("W"), "moveForward");
        _leftMotorAction.put("moveForward", moveForward);
        _leftMotorInput.put(KeyStroke.getKeyStroke("S"), "moveBackward");
        _leftMotorAction.put("moveBackward", moveBackward);
        _leftMotorInput.put(KeyStroke.getKeyStroke("A"), "turnLeft");
        _leftMotorAction.put("turnLeft", turnLeft);
        _leftMotorInput.put(KeyStroke.getKeyStroke("D"), "turnRight");
        _leftMotorAction.put("turnRight", turnRight);        
        _leftMotorInput.put(KeyStroke.getKeyStroke("L"), "toggleLED");
        _leftMotorAction.put("toggleLED", toggleLED);
        _leftMotorInput.put(KeyStroke.getKeyStroke("Q"), "launchArm");
        _leftMotorAction.put("launchArm", launchArm);  
        _leftMotorInput.put(KeyStroke.getKeyStroke("E"), "returnArm");
        _leftMotorAction.put("returnArm", returnArm); 
        
        
        // Set up the bindings for the key commands of the right motor.
        _rightMotorInput.put(KeyStroke.getKeyStroke("W"), "moveForward");
        _rightMotorAction.put("moveForward", moveForward);
        _rightMotorInput.put(KeyStroke.getKeyStroke("S"), "moveBackward");
        _rightMotorAction.put("moveBackward", moveBackward);
        _rightMotorInput.put(KeyStroke.getKeyStroke("A"), "turnLeft");
        _rightMotorAction.put("turnLeft", turnLeft);     
        _rightMotorInput.put(KeyStroke.getKeyStroke("D"), "turnRight");
        _rightMotorAction.put("turnRight", turnRight);
        _rightMotorInput.put(KeyStroke.getKeyStroke("L"), "toggleLED");
        _rightMotorAction.put("toggleLED", toggleLED);
        _rightMotorInput.put(KeyStroke.getKeyStroke("Q"), "launchArm");
        _rightMotorAction.put("launchArm", launchArm);   
        _rightMotorInput.put(KeyStroke.getKeyStroke("E"), "returnArm");
        _rightMotorAction.put("returnArm", returnArm);   
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel armStateLabel;
    private javax.swing.JToggleButton armStatusButton;
    private javax.swing.JLabel frontLeftIRLabel;
    private javax.swing.JLabel frontLeftIRText;
    private javax.swing.JLabel frontRightIRLabel;
    private javax.swing.JLabel frontRightIRText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel ledStateLabel;
    private javax.swing.JToggleButton ledStatusButton;
    private javax.swing.JLabel leftMotorLabel;
    private javax.swing.JProgressBar leftMotorProgress;
    private javax.swing.JLabel rearLeftIRLabel;
    private javax.swing.JLabel rearLeftIRText;
    private javax.swing.JLabel rearRightIRLabel;
    private javax.swing.JLabel rearRightIRText;
    private javax.swing.JLabel rightMotorLabel;
    private javax.swing.JProgressBar rightMotorProgress;
    private javax.swing.JButton uxConnectButton;
    private javax.swing.JButton uxDisconnectButton;
    private javax.swing.JTextArea uxEventLog;
    private javax.swing.JTextField uxIPBox;
    // End of variables declaration//GEN-END:variables

   // Throttle variable for incrementing/decrementing motor controls.
    private int _throttle = 0;
    private ActionMap _leftMotorAction; 
    private InputMap _leftMotorInput;
    private ActionMap _rightMotorAction;
    private InputMap _rightMotorInput;
}
